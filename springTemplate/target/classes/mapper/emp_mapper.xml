<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dbal.app.emp.mapper.EmpMapper">

	<insert id="insertEmpProc" statementType="CALLABLE" >   
		{call employee_ins(
		#{firstName},
		#{lastName},
		#{email},
		#{hireDate},
		#{jobId},
		#{employeeId, mode=OUT, jdbcType=VARCHAR},
		#{msg, mode=OUT, jdbcType=VARCHAR}		
		)
		}
	</insert>

	<select id="getEmp" parameterType="com.dbal.app.emp.EmpVO" resultType="com.dbal.app.emp.EmpVO">
		SELECT
		employee_id,
		first_name,
		last_name,
		email,
		hire_date,
		job_id
		FROM employees
		WHERE employee_id = #{employeeId}
	</select>

<!-- 	<resultMap type="#modelname" id="YourResultSet">
		<id property="param1" column="columnname1" />
		<result property="param2" column="columnname2" />
		<result property="param3" column="columnname3" />
	</resultMap>
 -->
	<select id="getEmpList" resultType="com.dbal.app.emp.EmpVO">   
		SELECT * 
		FROM employees
		<where>
		<if test="departmentId != null ">
		department_id = #{departmentId}
		</if>
		<if test="employeeId != null">
		and employee_id = #{employeeId}
		</if>
		<if test="salary != null">
		 <![CDATA[ and salary < #{salary}]]>
		</if>
		<if test="firstName != null">
		and upper(first_Name) like '%' || upper(#{firstName}) ||'%'
		</if>
		<if test="employeeIds != null">
		and employee_id in
		<foreach collection="employeeIds" item="id" open="(" close=")" separator=",">
		#{id}
		</foreach>
		</if>		
		</where>
		ORDER BY first_name
	</select>

	<insert id="insertEmp" parameterType="com.dbal.app.emp.EmpVO">  
		INSERT INTO employees
			(employee_id, 
			first_name, 
			last_name,
			email, 
			hire_date, 
			job_id,
			PROFILE) 
		VALUES
			(#{employeeId},
			#{firstName},
			#{lastName},
			#{email},
			#{hireDate},
			#{jobId},
			#{profile})
	</insert>
	
	<select id="getName" resultType="String" parameterType="integer">
		SELECT first_name from employees where employee_id = #{employeeId}
	</select>
		
	<select id="getCnt" resultType="int">
		Select count(*) from employees
	</select>
	
	<select id="getEmpMap" resultType="map">
		SELECT * FROM employees ORDER BY first_name
	</select>
	
	<select id="getDeptEmpCnt" resultType="map">
	select nvl(to_char(department_id),'no') "name", count(*) "cnt"
	from employees
	group by department_id
	</select>

<!-- 	<update id="updateSomething" parameterType="#modelname">
		UPDATE tablename1
		SET
		columnname1=#{param1}
		WHERE
		columnname2 = #{param2}
	</update>

	<delete id="deleteSomething" parameterType="int">
		DELETE FROM tablename1 WHERE
		columnname1 = #{param1}
	</delete> -->

</mapper>
